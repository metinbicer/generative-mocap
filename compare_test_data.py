# -*- coding: utf-8 -*-
"""

Author:   Metin Bicer
email:    m.bicer19@imperial.ac.uk

Compare synthetic datasets, for the test subjects generated by the conditional
GANs presented in the paper, to the experimental dataset

"""
import numpy as np
from utils import read_dataframes
from utils import get_real_data, get_synthetic_grfm, spmInverse, spmGRF
from utils import np_rmse, np_r_squared, t2test, metrics_m_std
from train_generate import setSeed
import torch
from matplotlib import rc
rc('text', usetex=True)

# feature names (joint angles and moments)
features_ik = np.array(['pelvis_tilt', 'pelvis_list', 'pelvis_rotation',
                        'hip_flexion_r', 'hip_adduction_r', 'hip_rotation_r',
                        'knee_angle_r', 'ankle_angle_r'])
features_grf = np.array(['ground_force_1_vx', 'ground_force_1_vy',
                         'ground_force_1_vz', 'ground_moment_1_my'])
# required variables for getting the experimental data from dataframe
subject_nos = 'all' # all subjects
trial_no = 'all' # all trials
plot_field_ik = 'ik_gc' # containing gait cycle ik data
plot_field_grf = 'grf_2d_gc' # containing gait cycle grf data
feature_names_field_ik = 'ik_names'
feature_names_field_grf = 'grf_names_2d'
divide_by = False # normalisation

# generative model names and corresponding conditions in the experimental data
# saved as a pd dataframe
df_fields = {'ugan': 'age',
             'acgan': 'age',
             'mcgan': 'mass',
             'llcgan': 'leglength_static',
             'wscgan': 'walking_speed',
             'gcgan': 'gender_int',
             'multicgan': 'multi'}
model_starts = ['gcgan', 'acgan', 'llcgan', 'mcgan', 'wscgan', 'multicgan']

# load experimental data
data_df = read_dataframes(['data/data_1.pickle', 'data/data_2.pickle'])
excluded_subjects = [2014001, 2014003, 2015042]
# get test data
data_df_test = data_df[data_df.subject.isin(excluded_subjects)].reset_index(drop=True)
n_real_data = len(data_df_test)

# settings for calculating/printing results
calc_rmses = True
compare_single_ex = False
normalised_rmse = False
seed = 0
mean_synthetic = False

# index numbers for getting ik and grf data of synthetic samples
ik_inds = [18, 26]
grfy_inds = [15, 16, 17]


###############################################################################
######## TEST
###############################################################################
all_metrics = {key:[] for key in ['ik_rmse', 'ik_r', 'sagit_rmse', 'sagit_r',
                                  'grf_rmse', 'grf_r', 'ik_spm', 'grf_spm']}
all_synthetic_ik = {model:[] for model in model_starts}
all_synthetic_grf = {model:[] for model in model_starts}
all_real_ik = []
all_real_grf = []
data_indxs = {subject:None for subject in excluded_subjects}
setSeed(seed)
print('\n')
for subject in excluded_subjects:
    subject_df = data_df_test[data_df_test['subject']==subject]
    data_indxs[subject] = subject_df.index.to_numpy()
    subject_df.reset_index(drop=True, inplace=True)
    n_trials = len(subject_df)
    # body weights
    bw = subject_df['mass'][0]*9.81
    print(subject)
    print('='*120)
    print(f'Age: {subject_df.age[0]:.0f}, Mass: {subject_df.mass[0]:.1f} kg')
    print(f'Leg: {subject_df.leglength_static[0]:.0f} mm, {subject_df.gender_str[0]}')
    wrt = f'Walking Speeds: {subject_df.walking_speed.min():.2f}-'
    wrt += f'{subject_df.walking_speed.max():.2f} m/s'
    print(wrt)
    print('='*120)
    # get exp ik data
    real_ik = get_real_data(subject_df, trial_no, subject_nos, features_ik,
                      plot_field_ik, feature_names_field_ik, divide_by,
                      'age', 0, 10e6)
    all_real_ik.append(real_ik)
    # get exp grf data (normalised by bw)
    real_grf = get_real_data(subject_df, trial_no, subject_nos, features_grf,
                              plot_field_grf, feature_names_field_grf,
                              divide_by, 'age', 0, 10e6)/bw
    all_real_grf.append(real_grf)
    header = f'\n{"Condition":<15s}{"Speed":<10s}{"IK RMSE":<15s}'
    header += f'{"IK R2":<15s}{"IK Sagit RMSE":<20s}'
    header += f'{"IK Sagit R2":<20s}{"GRF RMSE":<15s}{"GRF R2":<15s}'
    print(header)
    print('-'*120)
    # diff_ik = []
    # diff_grf = []
    for model_start in model_starts:
        if 'multi' in model_start:
            real_data_range = torch.Tensor(subject_df[['age', 'mass',
                                                       'leglength_static',
                                                       'walking_speed',
                                                       'gender_int']].values)
            labels_contd = real_data_range[:,:-1]
            labels_discr = real_data_range[:,-1]
        else:
            df_field = df_fields[model_start]
            real_data_range = subject_df[df_field].values
            real_data_range = torch.Tensor(real_data_range)
            if model_start =='g':
                labels_discr = real_data_range
                labels_contd = [None]*len(real_data_range)
            else:
                labels_contd = real_data_range
                labels_discr = [None]*len(real_data_range)
        # load file
        fold = f'Results/{model_start}/test_data/'
        saved_file = f'{fold}subject_{subject}.npy'
        synthetic_data = np.load(saved_file)
        # save
        all_synthetic_ik[model_start].append(synthetic_data[:, 0, :,
                                                            ik_inds[0]:ik_inds[1]])
        all_synthetic_grf[model_start].append(get_synthetic_grfm(synthetic_data,
                                                                 grfy_inds[0]))
        n_samples = int(synthetic_data.shape[0]/n_trials)
        synthetic_data = synthetic_data.reshape(n_trials, n_samples, 3, 101, 26)
        if mean_synthetic:
            synthetic_data = synthetic_data.mean(axis=1)
        if calc_rmses:
            res = f'{model_start:<15s}'
            ik_rmses, ik_rs, sagit_rmses, sagit_rs = [], [], [], []
            grf_rmses, grf_rs = [], []
            for sample_i in range(n_samples):
                data_i = synthetic_data[:,sample_i]
                synthetic_ik = data_i[:, 0, :, ik_inds[0]:ik_inds[1]]
                synthetic_grf = get_synthetic_grfm(data_i, grfy_inds[0])
                for label, syn_ik, syn_grf, r_ik, r_grf in zip(labels_contd,
                                                               synthetic_ik,
                                                               synthetic_grf,
                                                               real_ik, real_grf):
                    ik_rmse = np_rmse(syn_ik, r_ik, normalised_rmse)
                    ik_r = np_r_squared(syn_ik, r_ik)
                    # only sagittal plane
                    sagit_rmse = np_rmse(syn_ik[:,[3,6,7]], r_ik[:,[3,6,7]],
                                         normalised_rmse)
                    sagit_r = np_r_squared(syn_ik[:,[3,6,7]], r_ik[:,[3,6,7]])
                    grf_rmse = np_rmse(syn_grf, r_grf, normalised_rmse)
                    grf_r = np_r_squared(syn_grf, r_grf)
                    grfv_rmse = np_rmse(syn_grf[:,1:2], r_grf[:,1:2],
                                        normalised_rmse)
                    grfv_r = np_r_squared(syn_grf[:,1:2], r_grf[:,1:2])
                    if compare_single_ex:
                        res += f'{label[-1]:^10.2f}'
                        res += f'{ik_rmse:^10.2f}{ik_r:^8.2f}{sagit_rmse:^15.2f}'
                        res += f'{sagit_r:^15.2f}{grf_rmse:^10.2f}{grf_r:^10.2f}'
                        print(res)
                    # save results
                    ik_rmses.append(ik_rmse)
                    ik_rs.append(ik_r)
                    sagit_rmses.append(sagit_rmse)
                    sagit_rs.append(sagit_r)
                    grf_rmses.append(grf_rmse)
                    grf_rs.append(grf_r)
            # means and stds of error metrics
            ik_rmse_m, ik_rmse_std = np.mean(ik_rmses), np.std(ik_rmses)
            res1 = f'{np.mean(ik_rmses):.1f}±{np.std(ik_rmses):.1f}'
            ik_r_m, ik_r_std = np.mean(ik_rs), np.std(ik_rs)
            res2 = f'{np.mean(ik_rs):.2f}±{np.std(ik_rs):.2f}'
            sagit_rmse_m, sagit_rmse_std = np.mean(sagit_rmses), np.std(sagit_rmses)
            res3 = f'{np.mean(sagit_rmses):.1f}±{np.std(sagit_rmses):.1f}'
            ik_sagit_r_m, ik_sagit_r_std = np.mean(sagit_rs), np.std(sagit_rs)
            res4 = f'{np.mean(sagit_rs):.2f}±{np.std(sagit_rs):.2f}'
            grf_rmse_m, grf_rmse_std = np.mean(grf_rmses), np.std(grf_rmses)
            res5 = f'{np.mean(grf_rmses):.2f}±{np.std(grf_rmses):.2f}'
            grf_r_m, grf_r_std = np.mean(grf_rs), np.std(grf_rs)
            res6 = f'{np.mean(grf_rs):.2f}±{np.std(grf_rs):.2f}'
            # total results (mean and std)
            res += f'{"Overall":<10s}'
            res += f'{res1:<15s}{res2:<15}{res3:<20}{res4:<20}{res5:<15s}{res6:<15s}'
            print(res)
            # append to overall metrics
            for key, val in zip(all_metrics.keys(),
                                [ik_rmses, ik_rs, sagit_rmses, sagit_rs,
                                 grf_rmses, grf_rs]):
                all_metrics[key].append(val)
    print('\n\n')

print('\n\n')
print('#'*100)
print('#'*40, 'OVERALL AVERAGE', '#'*43)
print('#'*100)
header = f'\n{"Condition":<15s}{"IK RMSE":<15s}'
header += f'{"IK R2":<15s}{"IK Sagit RMSE":<20s}'
header += f'{"IK Sagit R2":<20s}{"GRF RMSE":<15s}{"GRF R2":<15s}'
print(header)
print('-'*120)
n_subjects = len(excluded_subjects)

for model_i, model_start in enumerate(model_starts):
    model_is = np.arange(model_i, n_subjects*len(model_starts), len(model_starts))
    res = f'{model_start:<15s}'
    # metrics
    ik_rmse_m, ik_rmse_std = metrics_m_std(all_metrics['ik_rmse'], model_is)
    res1 = f'{ik_rmse_m:.1f}±{ik_rmse_std:.1f}'
    ik_r_m, ik_r_std = metrics_m_std(all_metrics['ik_r'], model_is)
    res2 = f'{ik_r_m:.2f}±{ik_r_std:.2f}'
    sagit_rmse_m, sagit_rmse_std = metrics_m_std(all_metrics['sagit_rmse'], model_is)
    res3 = f'{sagit_rmse_m:.1f}±{sagit_rmse_std:.1f}'
    ik_sagit_r_m, ik_sagit_r_std = metrics_m_std(all_metrics['sagit_r'], model_is)
    res4 = f'{ik_sagit_r_m:.2f}±{ik_sagit_r_std:.2f}'
    grf_rmse_m, grf_rmse_std = metrics_m_std(all_metrics['grf_rmse'], model_is)
    res5 = f'{grf_rmse_m:.2f}±{grf_rmse_std:.2f}'
    grf_r_m, grf_r_std = metrics_m_std(all_metrics['grf_r'], model_is)
    res6 = f'{grf_r_m:.2f}±{grf_r_std:.2f}'
    # print
    res += f'{res1:<15s}{res2:<15}{res3:<20}{res4:<20}{res5:<15s}{res6:<15s}'
    print(res)

print('\n\n')
## SPM
# collect all exp data
all_real_ik = np.concatenate(all_real_ik, axis=0)
all_real_grf = np.concatenate(all_real_grf, axis=0)

# compare to the following model
model = 'wscgan'
print(f'Model is {model}')
# all generated data for this model (n_samples times for each ex)
model_ik = np.concatenate(all_synthetic_ik[model], axis=0)
model_grf = np.concatenate(all_synthetic_grf[model], axis=0)
# compare them
diff_ik = spmInverse(all_real_ik, model_ik, plot=True,
                     plot_individual=False, alpha=0.2, save=False,
                     save_name=f'Test_IK_SPM_{model}')
diff_grf = spmGRF(all_real_grf, model_grf, plot=True,
                  plot_individual=False, alpha=0.2, save=False,
                  save_name=f'Test_GRF_SPM_{model}')
toeoff = int(diff_grf[1])
# two-sample hotelling's T2 test
t2test(model_ik, model_grf, all_real_ik, all_real_grf, n_samples, toeoff)

wrt = f'Post-hoc t-test differences for {diff_ik[0]:.1f}% IK and '
wrt += f'{diff_grf[0]:.1f}% for GRFMs'
print(wrt)

# for a subject
subject = 2014001
print(f'Subject: {subject}')
# find start and end indxs
start, end = data_indxs[subject][0]*n_samples, (data_indxs[subject][-1]+1)*n_samples

# compare them
diff_ik = spmInverse(all_real_ik, model_ik[start:end], plot=True,
                     plot_individual=True, alpha=0.2, save=False,
                     save_name=f'Test_Preds_IK_{subject}_{model}')[0]
diff_grf = spmGRF(all_real_grf, model_grf[start:end], plot=True,
                  plot_individual=True, alpha=0.2, save=False,
                  save_name=f'Test_Preds_GRF_{subject}_{model}')[0]
print(f't-test differences for {diff_ik:.1f}% IK and {diff_grf:.1f}% for GRFMs')
